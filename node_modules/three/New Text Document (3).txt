#include <Fuzzy.h>
// For scope, instantiate all objects you will need to access in loop()
// It may be just one Fuzzy, but for demonstration, this sample will print
// all FuzzySet pertinence

// Fuzzy

// Fuzzy
Fuzzy *fuzzy = new Fuzzy();

// FuzzyInput for SM Gap from Threshold 
FuzzySet *VeryNegativeGap = new FuzzySet(-100, -50, -50, -4);
FuzzySet *NegativeGap = new FuzzySet(-5, -3, -3, -1);
FuzzySet *ZeroGap = new FuzzySet(-2, 0, 0, 2);
FuzzySet *PositiveGap= new FuzzySet(1, 3, 3, 5);
FuzzySet *VPositiveGap = new FuzzySet(4, 10, 10, 16);
FuzzySet *VVPositiveGap = new FuzzySet(10.1, 100.1, 100.1, 100.1);

// FuzzyInput for rain moisture
FuzzySet *NoRain = new FuzzySet(0, 0, 0, 0);
FuzzySet *LightRain = new FuzzySet(0, 15, 15, 35);
FuzzySet *Rainfall = new FuzzySet(25, 50, 50, 75);
FuzzySet *HeavyRain = new FuzzySet(62.5, 80, 80, 100.1);

// FuzzyInput for air temperature 
FuzzySet *NormalTemp = new FuzzySet(22, 26, 26, 30);
FuzzySet *HighTemp = new FuzzySet(28, 32, 32, 36); 

// FuzzyOutput
FuzzySet *pumpTime1 = new FuzzySet(0, 0, 0, 0);             //VNeg, Neg
FuzzySet *pumpTime21 = new FuzzySet(0, 0, 0, 3000);          //Neg, zero
FuzzySet *pumpTime22 = new FuzzySet(0, 0, 0, 3000);          //Zero
FuzzySet *pumpTime23 = new FuzzySet(0, 0, 0, 3000);          //Zero, Pos
FuzzySet *pumpTime31 = new FuzzySet(0, 2900, 3000, 3500);      //Pos
FuzzySet *pumpTime32 = new FuzzySet(0, 2950, 3000, 3500);     //Pos
FuzzySet *pumpTime33 = new FuzzySet(0, 3000, 3000, 3500);     //Pos
FuzzySet *pumpTime41 = new FuzzySet(0, 1500, 3000, 3000); //VPos
FuzzySet *pumpTime42 = new FuzzySet(0, 1600, 3200, 3200); //VPos
FuzzySet *pumpTime43 = new FuzzySet(0, 1700, 3400, 3400); //VPos
FuzzySet *pumpTime44 = new FuzzySet(0, 1800, 3600, 3600); //VPos
FuzzySet *pumpTime45 = new FuzzySet(0, 1900, 3800, 3800); //VPos
FuzzySet *pumpTime46 = new FuzzySet(0, 2000, 4000, 4000);//VPos
FuzzySet *pumpTime47 = new FuzzySet(0, 2100, 4200, 4200);//VPos
FuzzySet *pumpTime5 = new FuzzySet(0, 2200, 5400, 5400);//VPos


void setup()
{
  // Set the Serial output
  Serial.begin(9600);
  // Set a random seed

 Serial.println("SmGap   PumpTime");
  // Every setup must occur in the function setup()
    // FuzzyInput
  FuzzyInput *SMGapfromThreshold  = new FuzzyInput(1);

  SMGapfromThreshold->addFuzzySet(VeryNegativeGap);
  SMGapfromThreshold->addFuzzySet(NegativeGap);
  SMGapfromThreshold->addFuzzySet(ZeroGap);
  SMGapfromThreshold->addFuzzySet(PositiveGap);
  SMGapfromThreshold->addFuzzySet(VPositiveGap);
  SMGapfromThreshold->addFuzzySet(VVPositiveGap);
  fuzzy->addFuzzyInput(SMGapfromThreshold);

  // FuzzyInput
  FuzzyInput *rainMoisture = new FuzzyInput(2);

  rainMoisture->addFuzzySet(NoRain);
  rainMoisture->addFuzzySet(LightRain);
  rainMoisture->addFuzzySet(Rainfall);
  rainMoisture->addFuzzySet(HeavyRain);
  fuzzy->addFuzzyInput(rainMoisture);

  // FuzzyInput
  FuzzyInput *airtemperature = new FuzzyInput(3);

  airtemperature->addFuzzySet(NormalTemp);
  airtemperature->addFuzzySet(HighTemp);
  fuzzy->addFuzzyInput(airtemperature);


  // FuzzyOutput
  FuzzyOutput *PumpTime = new FuzzyOutput(1);

  PumpTime->addFuzzySet(pumpTime1);
  PumpTime->addFuzzySet(pumpTime21);
  PumpTime->addFuzzySet(pumpTime22);
  PumpTime->addFuzzySet(pumpTime23);
  PumpTime->addFuzzySet(pumpTime31);
  PumpTime->addFuzzySet(pumpTime32);
  PumpTime->addFuzzySet(pumpTime33);
  PumpTime->addFuzzySet(pumpTime41);
  PumpTime->addFuzzySet(pumpTime42);
  PumpTime->addFuzzySet(pumpTime43);
  PumpTime->addFuzzySet(pumpTime44);
  PumpTime->addFuzzySet(pumpTime45);
  PumpTime->addFuzzySet(pumpTime46);
  PumpTime->addFuzzySet(pumpTime47);
  PumpTime->addFuzzySet(pumpTime5);
  fuzzy->addFuzzyOutput(PumpTime);

  /////////////////////////////////
//output rule:
  FuzzyRuleConsequent *thenpumpTime1 = new FuzzyRuleConsequent();
  thenpumpTime1->addOutput(pumpTime1);
  FuzzyRuleConsequent *thenpumpTime21 = new FuzzyRuleConsequent();
  thenpumpTime21->addOutput(pumpTime21);
  FuzzyRuleConsequent *thenpumpTime22 = new FuzzyRuleConsequent();
  thenpumpTime22->addOutput(pumpTime22);
  FuzzyRuleConsequent *thenpumpTime23 = new FuzzyRuleConsequent();
  thenpumpTime23->addOutput(pumpTime23);
  FuzzyRuleConsequent *thenpumpTime31 = new FuzzyRuleConsequent();
  thenpumpTime31->addOutput(pumpTime31);
  FuzzyRuleConsequent *thenpumpTime32 = new FuzzyRuleConsequent();
  thenpumpTime32->addOutput(pumpTime32);
  FuzzyRuleConsequent *thenpumpTime33 = new FuzzyRuleConsequent();
  thenpumpTime33->addOutput(pumpTime33);
  FuzzyRuleConsequent *thenpumpTime41 = new FuzzyRuleConsequent();
  thenpumpTime41->addOutput(pumpTime41);
  FuzzyRuleConsequent *thenpumpTime42 = new FuzzyRuleConsequent();
  thenpumpTime42->addOutput(pumpTime42);
  FuzzyRuleConsequent *thenpumpTime43 = new FuzzyRuleConsequent();
  thenpumpTime43->addOutput(pumpTime43);
  FuzzyRuleConsequent *thenpumpTime44 = new FuzzyRuleConsequent();
  thenpumpTime44->addOutput(pumpTime44);
  FuzzyRuleConsequent *thenpumpTime45 = new FuzzyRuleConsequent();
  thenpumpTime45->addOutput(pumpTime45);
  FuzzyRuleConsequent *thenpumpTime46 = new FuzzyRuleConsequent();
  thenpumpTime46->addOutput(pumpTime46);
  FuzzyRuleConsequent *thenpumpTime47 = new FuzzyRuleConsequent();
  thenpumpTime47->addOutput(pumpTime47);
  FuzzyRuleConsequent *thenpumpTime5 = new FuzzyRuleConsequent();
  thenpumpTime5->addOutput(pumpTime5);

//tHRESHOLD input:
  FuzzyRuleAntecedent *ifVeryNegativeGap = new FuzzyRuleAntecedent();
  ifVeryNegativeGap->joinSingle(VeryNegativeGap);
  FuzzyRuleAntecedent *ifNegativeGap = new FuzzyRuleAntecedent();
  ifNegativeGap->joinSingle(NegativeGap);
  FuzzyRuleAntecedent *ifZeroGap = new FuzzyRuleAntecedent();
  ifZeroGap->joinSingle(ZeroGap);
  FuzzyRuleAntecedent *ifPositiveGap = new FuzzyRuleAntecedent();
  ifPositiveGap->joinSingle(PositiveGap);
  FuzzyRuleAntecedent *ifVPositiveGap = new FuzzyRuleAntecedent();
  ifVPositiveGap->joinSingle(VPositiveGap);
  FuzzyRuleAntecedent *ifVVPositiveGap = new FuzzyRuleAntecedent();
  ifVVPositiveGap->joinSingle(VVPositiveGap);    
  
// Group the Rain Set OR
  FuzzyRuleAntecedent *ifNoRain = new FuzzyRuleAntecedent();
  ifNoRain->joinSingle(NoRain);
  FuzzyRuleAntecedent *ifLightRain = new FuzzyRuleAntecedent();
  ifLightRain->joinSingle(LightRain);
  FuzzyRuleAntecedent *ifRainfall = new FuzzyRuleAntecedent();
  ifRainfall->joinSingle(Rainfall);
  FuzzyRuleAntecedent *ifHeavyRain = new FuzzyRuleAntecedent();
  ifHeavyRain->joinSingle(HeavyRain);
  FuzzyRuleAntecedent *RainfallOrHeavyRain = new FuzzyRuleAntecedent();
  RainfallOrHeavyRain->joinWithOR(Rainfall, HeavyRain);
  FuzzyRuleAntecedent *LightRainOrRainfallOrHeavyRain = new FuzzyRuleAntecedent();
  LightRainOrRainfallOrHeavyRain->joinWithOR(LightRain, RainfallOrHeavyRain);

// Group the Air Temp OR
  FuzzyRuleAntecedent *ifNormalTemp = new FuzzyRuleAntecedent();
  ifNormalTemp->joinSingle(NormalTemp);
  FuzzyRuleAntecedent *ifHighTemp = new FuzzyRuleAntecedent();
  ifHighTemp->joinSingle(HighTemp);

// Group rain and airtemp AND
  FuzzyRuleAntecedent *NoRainAndHighTemp = new FuzzyRuleAntecedent();
  NoRainAndHighTemp->joinWithAND(NoRain, HighTemp); 
  FuzzyRuleAntecedent *NoRainAndNormalTemp = new FuzzyRuleAntecedent();
  NoRainAndNormalTemp->joinWithAND(NoRain, NormalTemp);   
  FuzzyRuleAntecedent *LightRainAndHighTemp = new FuzzyRuleAntecedent();
  LightRainAndHighTemp->joinWithAND(LightRain, HighTemp); 
  FuzzyRuleAntecedent *LightRainAndNormalTemp = new FuzzyRuleAntecedent();
  LightRainAndNormalTemp->joinWithAND(LightRain, NormalTemp); 
  FuzzyRuleAntecedent *RainfallAndHighTemp = new FuzzyRuleAntecedent();
  RainfallAndHighTemp->joinWithAND(Rainfall, HighTemp); 
  FuzzyRuleAntecedent *RainfallAndNormalTemp = new FuzzyRuleAntecedent();
  RainfallAndNormalTemp->joinWithAND(Rainfall, NormalTemp); 
  FuzzyRuleAntecedent *HeavyRainAndHighTemp = new FuzzyRuleAntecedent();
  HeavyRainAndHighTemp->joinWithAND(HeavyRain, HighTemp); 
  FuzzyRuleAntecedent *HeavyRainAndNormalTemp = new FuzzyRuleAntecedent();
  HeavyRainAndNormalTemp->joinWithAND(HeavyRain, NormalTemp);

// Building FuzzyRule1
  FuzzyRule *fuzzyRule1 = new FuzzyRule(1, ifVeryNegativeGap, thenpumpTime1 );
  fuzzy->addFuzzyRule(fuzzyRule1);
 
  // Building FuzzyRule2
  FuzzyRuleAntecedent *ifNegativeGapAndLightRainOrRainfallOrHeavyRain = new FuzzyRuleAntecedent();
  ifNegativeGapAndLightRainOrRainfallOrHeavyRain->joinWithAND(ifNegativeGap, LightRainOrRainfallOrHeavyRain);
  FuzzyRule *fuzzyRule2 = new FuzzyRule(2, ifNegativeGapAndLightRainOrRainfallOrHeavyRain, thenpumpTime1 );
  fuzzy->addFuzzyRule(fuzzyRule2);

  // Building FuzzyRule3
  FuzzyRuleAntecedent *ifNegativeGapAndNoRainAndNormalTemp = new FuzzyRuleAntecedent();
  ifNegativeGapAndNoRainAndNormalTemp->joinWithAND(ifNegativeGap, NoRainAndNormalTemp);
  FuzzyRule *fuzzyRule3 = new FuzzyRule(3, ifNegativeGapAndNoRainAndNormalTemp, thenpumpTime1 ); 
  fuzzy->addFuzzyRule(fuzzyRule3);

  // Building FuzzyRule4
  FuzzyRuleAntecedent *ifNegativeGapAndNoRainAndHighTemp = new FuzzyRuleAntecedent();
  ifNegativeGapAndNoRainAndHighTemp->joinWithAND(ifNegativeGap, NoRainAndHighTemp);
  FuzzyRule *fuzzyRule4 = new FuzzyRule(4, ifNegativeGapAndNoRainAndHighTemp, thenpumpTime21 ); 
  fuzzy->addFuzzyRule(fuzzyRule4);

  // Building FuzzyRule5  
  FuzzyRuleAntecedent *ifZeroGapAndRainfallOrHeavyRain = new FuzzyRuleAntecedent();
  ifZeroGapAndRainfallOrHeavyRain->joinWithAND(ifZeroGap, RainfallOrHeavyRain);
  FuzzyRule *fuzzyRule5 = new FuzzyRule(5, ifZeroGapAndRainfallOrHeavyRain, thenpumpTime1 ); 
  fuzzy->addFuzzyRule(fuzzyRule5);

  // Building FuzzyRule6
  FuzzyRuleAntecedent *ifZeroGapAndLightRainAndNormalTemp = new FuzzyRuleAntecedent();
  ifZeroGapAndLightRainAndNormalTemp->joinWithAND(ifZeroGap, LightRainAndNormalTemp);
  FuzzyRule *fuzzyRule6 = new FuzzyRule(6, ifZeroGapAndLightRainAndNormalTemp, thenpumpTime1 ); 
  fuzzy->addFuzzyRule(fuzzyRule6);

  // Building FuzzyRule7  
  FuzzyRuleAntecedent *ifZeroGapAndLightRainAndHighTemp = new FuzzyRuleAntecedent();
  ifZeroGapAndLightRainAndHighTemp->joinWithAND(ifZeroGap, LightRainAndHighTemp);
  FuzzyRule *fuzzyRule7 = new FuzzyRule(7, ifZeroGapAndLightRainAndHighTemp, thenpumpTime21 ); 
  fuzzy->addFuzzyRule(fuzzyRule7);

// Building FuzzyRule8
  FuzzyRuleAntecedent *ifZeroGapAndNoRainAndNormalTemp = new FuzzyRuleAntecedent();
  ifZeroGapAndNoRainAndNormalTemp->joinWithAND(ifZeroGap, NoRainAndNormalTemp);
  FuzzyRule *fuzzyRule8 = new FuzzyRule(8, ifZeroGapAndNoRainAndNormalTemp, thenpumpTime22 ); 
  fuzzy->addFuzzyRule(fuzzyRule8);

  // Building FuzzyRule9  
  FuzzyRuleAntecedent *ifZeroGapAndNoRainAndHighTemp = new FuzzyRuleAntecedent();
  ifZeroGapAndNoRainAndHighTemp->joinWithAND(ifZeroGap, NoRainAndHighTemp);
  FuzzyRule *fuzzyRule9 = new FuzzyRule(9, ifZeroGapAndNoRainAndHighTemp, thenpumpTime23 ); 
  fuzzy->addFuzzyRule(fuzzyRule9);

  // Building FuzzyRule10
  FuzzyRuleAntecedent *ifPositiveGapAndHeavyRainAndNormalTemp = new FuzzyRuleAntecedent();
  ifPositiveGapAndHeavyRainAndNormalTemp->joinWithAND(ifPositiveGap, HeavyRainAndNormalTemp);
  FuzzyRule *fuzzyRule10 = new FuzzyRule(10, ifPositiveGapAndHeavyRainAndNormalTemp, thenpumpTime22 ); 
  fuzzy->addFuzzyRule(fuzzyRule10);

  // Building FuzzyRule11 
  FuzzyRuleAntecedent *ifPositiveGapAndHeavyRainAndHighTemp = new FuzzyRuleAntecedent();
  ifPositiveGapAndHeavyRainAndHighTemp->joinWithAND(ifPositiveGap, HeavyRainAndHighTemp);
  FuzzyRule *fuzzyRule11 = new FuzzyRule(11, ifPositiveGapAndHeavyRainAndHighTemp, thenpumpTime23 ); 
  fuzzy->addFuzzyRule(fuzzyRule11);

  // Building FuzzyRule12
  FuzzyRuleAntecedent *ifPositiveGapAndRainfallAndNormalTemp = new FuzzyRuleAntecedent();
  ifPositiveGapAndRainfallAndNormalTemp->joinWithAND(ifPositiveGap, RainfallAndNormalTemp);
  FuzzyRule *fuzzyRule12 = new FuzzyRule(12, ifPositiveGapAndRainfallAndNormalTemp, thenpumpTime23 ); 
  fuzzy->addFuzzyRule(fuzzyRule12);

  // Building FuzzyRule13 
  FuzzyRuleAntecedent *ifPositiveGapAndRainfallAndHighTemp = new FuzzyRuleAntecedent();
  ifPositiveGapAndRainfallAndHighTemp->joinWithAND(ifPositiveGap, RainfallAndHighTemp);
  FuzzyRule *fuzzyRule13 = new FuzzyRule(13, ifPositiveGapAndRainfallAndHighTemp, thenpumpTime31 ); 
  fuzzy->addFuzzyRule(fuzzyRule13);

  // Building FuzzyRule14
  FuzzyRuleAntecedent *ifPositiveGapAndLightRainAndNormalTemp = new FuzzyRuleAntecedent();
  ifPositiveGapAndLightRainAndNormalTemp->joinWithAND(ifPositiveGap, LightRainAndNormalTemp);
  FuzzyRule *fuzzyRule14 = new FuzzyRule(14, ifPositiveGapAndLightRainAndNormalTemp, thenpumpTime31 ); 
  fuzzy->addFuzzyRule(fuzzyRule14);

  // Building FuzzyRule15 
  FuzzyRuleAntecedent *ifPositiveGapAndLightRainAndHighTemp = new FuzzyRuleAntecedent();
  ifPositiveGapAndLightRainAndHighTemp->joinWithAND(ifPositiveGap, LightRainAndHighTemp);
  FuzzyRule *fuzzyRule15 = new FuzzyRule(15, ifPositiveGapAndLightRainAndHighTemp, thenpumpTime32 ); 
  fuzzy->addFuzzyRule(fuzzyRule15);

  // Building FuzzyRule16
  FuzzyRuleAntecedent *ifPositiveGapAndNoRainAndNormalTemp = new FuzzyRuleAntecedent();
  ifPositiveGapAndNoRainAndNormalTemp->joinWithAND(ifPositiveGap, NoRainAndNormalTemp);
  FuzzyRule *fuzzyRule16 = new FuzzyRule(16, ifPositiveGapAndNoRainAndNormalTemp, thenpumpTime32 ); 
  fuzzy->addFuzzyRule(fuzzyRule16);

  // Building FuzzyRule17 
  FuzzyRuleAntecedent *ifPositiveGapAndNoRainAndHighTemp = new FuzzyRuleAntecedent();
  ifPositiveGapAndNoRainAndHighTemp->joinWithAND(ifPositiveGap, NoRainAndHighTemp);
  FuzzyRule *fuzzyRule17 = new FuzzyRule(17, ifPositiveGapAndNoRainAndHighTemp, thenpumpTime33 ); 
  fuzzy->addFuzzyRule(fuzzyRule17);

  // Building FuzzyRule18
  FuzzyRuleAntecedent *ifVPositiveGapAndHeavyRainAndNormalTemp = new FuzzyRuleAntecedent();
  ifVPositiveGapAndHeavyRainAndNormalTemp->joinWithAND(ifVPositiveGap, HeavyRainAndNormalTemp);
  FuzzyRule *fuzzyRule18 = new FuzzyRule(18, ifVPositiveGapAndHeavyRainAndNormalTemp, thenpumpTime41 ); 
  fuzzy->addFuzzyRule(fuzzyRule18);

  // Building FuzzyRule19 
  FuzzyRuleAntecedent *ifVPositiveGapAndHeavyRainAndHighTemp = new FuzzyRuleAntecedent();
  ifVPositiveGapAndHeavyRainAndHighTemp->joinWithAND(ifVPositiveGap, HeavyRainAndHighTemp);
  FuzzyRule *fuzzyRule19 = new FuzzyRule(19, ifVPositiveGapAndHeavyRainAndHighTemp, thenpumpTime42 ); 
  fuzzy->addFuzzyRule(fuzzyRule19);

  // Building FuzzyRule20
  FuzzyRuleAntecedent *ifVPositiveGapAndRainfallAndNormalTemp = new FuzzyRuleAntecedent();
  ifVPositiveGapAndRainfallAndNormalTemp->joinWithAND(ifVPositiveGap, RainfallAndNormalTemp);
  FuzzyRule *fuzzyRule20 = new FuzzyRule(20, ifVPositiveGapAndRainfallAndNormalTemp, thenpumpTime43 ); 
  fuzzy->addFuzzyRule(fuzzyRule20);

  // Building FuzzyRule21
  FuzzyRuleAntecedent *ifVPositiveGapAndRainfallAndHighTemp = new FuzzyRuleAntecedent();
  ifVPositiveGapAndRainfallAndHighTemp->joinWithAND(ifVPositiveGap, RainfallAndHighTemp);
  FuzzyRule *fuzzyRule21 = new FuzzyRule(21, ifVPositiveGapAndRainfallAndHighTemp, thenpumpTime44 ); 
  fuzzy->addFuzzyRule(fuzzyRule21);

  // Building FuzzyRule22
  FuzzyRuleAntecedent *ifVPositiveGapAndLightRainAndNormalTemp = new FuzzyRuleAntecedent();
  ifVPositiveGapAndLightRainAndNormalTemp->joinWithAND(ifVPositiveGap, LightRainAndNormalTemp);
  FuzzyRule *fuzzyRule22 = new FuzzyRule(22, ifVPositiveGapAndLightRainAndNormalTemp, thenpumpTime45 ); 
  fuzzy->addFuzzyRule(fuzzyRule22);

  // Building FuzzyRule23
  FuzzyRuleAntecedent *ifVPositiveGapAndLightRainAndHighTemp = new FuzzyRuleAntecedent();
  ifVPositiveGapAndLightRainAndHighTemp->joinWithAND(ifVPositiveGap, LightRainAndHighTemp);
  FuzzyRule *fuzzyRule23 = new FuzzyRule(23, ifVPositiveGapAndLightRainAndHighTemp, thenpumpTime46 ); 
  fuzzy->addFuzzyRule(fuzzyRule23);

  // Building FuzzyRule24
  FuzzyRuleAntecedent *ifVPositiveGapAndNoRain = new FuzzyRuleAntecedent();
  ifVPositiveGapAndNoRain->joinWithAND(ifVPositiveGap, ifNoRain);
  FuzzyRule *fuzzyRule24 = new FuzzyRule(24, ifVPositiveGapAndNoRain, thenpumpTime47 ); 
  fuzzy->addFuzzyRule(fuzzyRule24);

  FuzzyRule *fuzzyRule25 = new FuzzyRule(25, ifVVPositiveGap, thenpumpTime5 );
  fuzzy->addFuzzyRule(fuzzyRule25);
 ///////////////////////////////
}
void loop() {
  static float input1 = -5.5; // Initial value

  // Loop until input1 reaches 58
  while (input1 <= 30.0) {
    float input2 = 0;
    int input3 = 35;

    Serial.print(input1);
    Serial.print("     ");

    fuzzy->setInput(1, input1);
    fuzzy->setInput(2, input2);
    fuzzy->setInput(3, input3);

    fuzzy->fuzzify();
    float output1 = fuzzy->defuzzify(1);
  
    
 
    if (input1>=2 && input1<=4){
  output1 = output1 + input1 * 50;}
  
  if( input1>4 && input1<=4.6){
    output1 = output1 + 187/((input1/100)+1);
  }
      if( input1>4.6 && input1<=4.8){
    output1 = output1 + 135/((input1/100)+1);
  }
      if( input1>4.8 && input1<=4.9){
    output1 = output1 + input1 * 50;
  }
  if( input1>4.9 && input1<=9.8){
    output1 = output1 + input1 * 60;
  }
    if( input1>9.8 && input1<=9.9){
    output1 = output1 + input1 * 65;
  }
    if( input1>9.9 && input1<=10.1){
    output1 = output1 + input1 * 65;
  }
    if( (input1>10.1 && input1<=10.2 )){
    output1 = output1 + input1 * 130;
  }

    if( input1>10.2 && input1<=20.0){
    output1 = output1 + input1 * 64;
  }
      if( input1>20 && input1<=40.0){
    output1 = output1 + input1 * 62;
  }
      if( input1>40 && input1<=70){
    output1 = output1 + input1 * 61;
  }
      if( input1>70 && input1<=101){
    output1 = output1 + input1 * 60.5;}





    Serial.println(output1);

    // Increment input1 for the next loop iteration
    input1 += 0.5;

    // Add a delay if necessary to slow down the loop
    delay(5); // 1 second delay for readability
  }

  // Stop the loop by putting the Arduino into an infinite loop
  while (true) {
    // Do nothing, effectively stopping the program
  }
}